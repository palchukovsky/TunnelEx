/**************************************************************************
 *   Created: 2008/02/07 0:45
 *    Author: Eugene V. Palchukovsky
 *    E-mail: eugene@palchukovsky.com
 * -------------------------------------------------------------------
 *   Project: TunnelEx
 *       URL: http://tunnelex.net
 * -------------------------------------------------------------------
 *       $Id: Compile.js.template 1127 2011-02-22 17:23:32Z palchukovsky $
 **************************************************************************/

var shell = new ActiveXObject("WScript.Shell");
var fileSystem = new ActiveXObject("Scripting.FileSystemObject");
var inputFile = "";
var outputDir = "";
var launchRand = Math.ceil(Math.random() * 1000000);
var vendorName = "Tunnelex Project";
var domain = "tunnelex.net";
var productName = "TunnelEx"

//////////////////////////////////////////////////////////////////////////

function GetArgs() {
	for (i = 0; i < WScript.Arguments.length; ++i) {
		var arg = WScript.Arguments(i);
		var opt = arg.substring(0, arg.indexOf("="));
		if (opt.length == 0) {
			return false;
		}
		if (opt == "InputFile") {
			inputFile = arg.substring(opt.length + 1, arg.length);
		} else if (opt == "OutputDir") {
			outputDir = arg.substring(opt.length + 1, arg.length);
		} else {
			return false;
		}
	}
	return inputFile != "" && outputDir != "";
}

function IsExistsInFile(filePath, line) {
	try {
		var f = fileSystem.OpenTextFile(filePath, 1, false);
		while (f.AtEndOfStream != true) {
			if (f.ReadLine() == line) {
				return true;
			}
		}
	} catch (e) {
		//...//
	}
	return false;
}

function GetRevision() {
    var result = new Object;
    result.number = $WCREV$;
	result.state = "$WCMODS?M:$$WCMIXED?X:$$WCINSVN?:V$";
	result.id = launchRand;
	return result;
}

function GetVersion() {
	var f = fileSystem.OpenTextFile(inputFile, 1, false);
	if (f.AtEndOfStream != true) {
		var expression = /^\s*(\d+)\.(\d+).(\d+)\s*$/;
		var match = expression.exec(f.ReadLine());
		if (match) {
			var version = new Object;
			version.majorHigh	= match[1];
			version.majorLow	= match[2];
			version.minorHigh	= match[3];
			return version;
		} else {
			shell.Popup("Version compiling (revision getting): could not parse version file.");
		}
	} else {
		shell.Popup("Version compiling (revision getting): could not find version file.");
	}
	return null;
}

function CreateRevisionCppHeaderFile() {
	var revision = GetRevision();
	var revisionNumbLine = "#	define TUNNELEX_REVISION_NUMBER " + revision.number;
	var revisionStateLine = "#		define TUNNELEX_REVISION_STATE \"" + revision.state + "\"";
	var revisionStateLineW = "#		define TUNNELEX_REVISION_STATE_W L\"" + revision.state + "\"";
	var revisionTestStateLine = "#		define TUNNELEX_REVISION_STATE \"" + revision.state + "T\"";
	var revisionTestStateLineW = "#		define TUNNELEX_REVISION_STATE_W L\"" + revision.state + "T\"";
	var revisionDebugStateLine = "#		define TUNNELEX_REVISION_STATE \"" + revision.state + "D\"";
	var revisionDebugStateLineW = "#		define TUNNELEX_REVISION_STATE_W L\"" + revision.state + "D\"";
	var fullFileName = outputDir + "Revision.h";
	if (
			!IsExistsInFile(fullFileName, revisionNumbLine)
			|| !IsExistsInFile(fullFileName, revisionStateLine)
			|| !IsExistsInFile(fullFileName, revisionTestStateLine)
			|| !IsExistsInFile(fullFileName, revisionDebugStateLine)) {
		var define = "INCLUDED_FILE__TUNNELEX__Revision_h__0802010512";
		var f = fileSystem.CreateTextFile(fullFileName, true);
		f.WriteLine("#ifndef " + define);
		f.WriteLine("#define " + define);
		f.WriteLine(revisionNumbLine);
		f.WriteLine("#	ifdef _DEBUG");
		f.WriteLine(revisionDebugStateLine);
		f.WriteLine(revisionDebugStateLineW);
		f.WriteLine("#	elif TEST");
		f.WriteLine(revisionTestStateLine);
		f.WriteLine(revisionTestStateLineW);
		f.WriteLine("#	else");
		f.WriteLine(revisionStateLine);
		f.WriteLine(revisionStateLineW);
		f.WriteLine("#	endif");
		f.WriteLine("#	define TUNNELEX_REVISION_UNIQUE_ID " + revision.id);
		f.WriteLine("#endif // " + define);
	}
}

function CreateVersionCppHeaderFile() {
	var version = GetVersion();
	if (version == null) {
		return;
	}
	var versionMajorHighLine = "#define TUNNELEX_VERSION_MAJOR_HIGH " + version.majorHigh;
	var versionMajorLowLine = "#define TUNNELEX_VERSION_MAJOR_LOW " + version.majorLow;
	var versionMinorHighLine = "#define TUNNELEX_VERSION_MINOR_HIGH " + version.minorHigh;
	var versionMinorLowLine = "#define TUNNELEX_VERSION_MINOR_LOW TUNNELEX_REVISION_NUMBER";
	var vendorLine = "#define TUNNELEX_VENDOR \"" + vendorName + "\"";
	var vendorLineW = "#define TUNNELEX_VENDOR_W L\"" + vendorName + "\"";
	var domainLine = "#define TUNNELEX_DOMAIN \"" + domain + "\"";
	var domainLineW = "#define TUNNELEX_DOMAIN_W L\"" + domain + "\"";
	var nameLine = "#define TUNNELEX_NAME \"" + productName + "\"";
	var nameLineW = "#define TUNNELEX_NAME_W L\"" + productName + "\"";
	var copyrightLine = "#define TUNNELEX_COPYRIGHT L\"Copyright 2011 (C) \" TUNNELEX_VENDOR_W L\". All rights reserved.\"";
	var fullFileName = outputDir + "Version.h";
	if (
			!IsExistsInFile(fullFileName, versionMajorHighLine)
			||	!IsExistsInFile(fullFileName, versionMajorLowLine)
			||	!IsExistsInFile(fullFileName, versionMinorHighLine)
			|| !IsExistsInFile(fullFileName, copyrightLine)) {
		var define = "INCLUDED_FILE__TUNNELEX__Version_h__0802010512";
		var f = fileSystem.CreateTextFile(fullFileName, true);
		f.WriteLine("#ifndef " + define);
		f.WriteLine("#define " + define);
		f.WriteLine("#include \"Revision.h\"");
		f.WriteLine("#include \"Constants.h\"");
		f.WriteLine(versionMajorHighLine);
		f.WriteLine(versionMajorLowLine);
		f.WriteLine(versionMinorHighLine);
		f.WriteLine(versionMinorLowLine);
		f.WriteLine(versionMinorLowLine);
		f.WriteLine("#define TUNNELEX_VERSION _XSTR(TUNNELEX_VERSION_MAJOR_HIGH) \".\" _XSTR(TUNNELEX_VERSION_MAJOR_LOW) \".\" _XSTR(TUNNELEX_VERSION_MINOR_HIGH)");
		f.WriteLine("#define TUNNELEX_VERSION_W _XWSTR(TUNNELEX_VERSION_MAJOR_HIGH) L\".\" _XWSTR(TUNNELEX_VERSION_MAJOR_LOW) L\".\" _XWSTR(TUNNELEX_VERSION_MINOR_HIGH)");
		f.WriteLine("#define TUNNELEX_VERSION_FULL _XSTR(TUNNELEX_VERSION_MAJOR_HIGH) \".\" _XSTR(TUNNELEX_VERSION_MAJOR_LOW) \".\" _XSTR(TUNNELEX_VERSION_MINOR_HIGH) \".\" _XSTR(TUNNELEX_VERSION_MINOR_LOW)");
		f.WriteLine("#define TUNNELEX_VERSION_FULL_W _XWSTR(TUNNELEX_VERSION_MAJOR_HIGH) L\".\" _XWSTR(TUNNELEX_VERSION_MAJOR_LOW) L\".\" _XWSTR(TUNNELEX_VERSION_MINOR_HIGH) L\".\" _XWSTR(TUNNELEX_VERSION_MINOR_LOW)");
		f.WriteLine(vendorLine);
		f.WriteLine(vendorLineW);
		f.WriteLine(domainLine);
		f.WriteLine(domainLineW);
		f.WriteLine(nameLine);
		f.WriteLine(nameLineW);
		f.WriteLine(copyrightLine);
		f.WriteLine("#endif // " + define);
	}
}

function CreateRevisionCmdFile() {
	var revision = GetRevision();
	var f = fileSystem.CreateTextFile(outputDir + "SetRevision.cmd", true);
	f.WriteLine("set TunnelExRevisionNumber=" + revision.number);
	f.WriteLine("set TunnelExRevisionState=" + revision.state);
	f.WriteLine("set TunnelExRevisionUniqueId=" + revision.id);
}

function CreateVersionCmdFile() {
	var version = GetVersion();
	if (version == null) {
		return;
	}
	var f = fileSystem.CreateTextFile(outputDir + "SetVersion.cmd", true);
	f.WriteLine("Call \"" + outputDir + "SetRevision.cmd\"");
	f.WriteLine("set TunnelExVersionMajorHigh=" + version.majorHigh);
	f.WriteLine("set TunnelExVersionMajorLow=" + version.majorLow);
	f.WriteLine("set TunnelExVersionMinorHigh=" + version.minorHigh);
	f.WriteLine("set TunnelExVersionMinorLow=%TunnelExRevisionNumber%");
	f.WriteLine("set TunnelExVersion=%TunnelExVersionMajorHigh%.%TunnelExVersionMajorLow%.%TunnelExVersionMinorHigh%");
	f.WriteLine("set TunnelExVersionFull=%TunnelExVersionMajorHigh%.%TunnelExVersionMajorLow%.%TunnelExVersionMinorHigh%.%TunnelExVersionMinorLow%");
	f.WriteLine("set TunnelExVendor=" + vendorName);
	f.WriteLine("set TunnelExDomain=" + domain);
	f.WriteLine("set TunnelExName=" + productName);
}

function main() {
	if (!GetArgs()) {
		shell.Popup("Version compiling: Wrong arguments!");
		return;
	}
	CreateRevisionCppHeaderFile();
	CreateVersionCppHeaderFile();
	CreateRevisionCmdFile();
	CreateVersionCmdFile();
}

//////////////////////////////////////////////////////////////////////////

try {
	main();
} catch (e) {
	shell.Popup("Version compiling: " + e.message);
}

//////////////////////////////////////////////////////////////////////////
