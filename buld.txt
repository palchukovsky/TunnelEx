=========================

     Сборка TunnelEx     

=========================



1. Среда.
=========

1.1. Требование к ПО
--------------------
    * ОС Microsoft Windows XP SP3 или выше;
    * Git;
    * Microsoft Visual C++ 2010 SP1;
    * Microsoft Windows SDK for Windows 7 Version 7.1
      (web-installer: http://www.microsoft.com/downloads/en/details.aspx?FamilyID=6b6c21d2-2006-4afa-9702-529fa782d63b&displaylang=en
      full installer: http://www.microsoft.com/downloads/en/details.aspx?FamilyID=35aeda01-421d-4ba5-b44b-543dc8c33a20);
    * WiX 3.5 (http://wix.sourceforge.net);
    * RAR 4.0 (http://rarlab.com/rar_archiver.htm);
    * doxygen 1.6.2 (http://www.doxygen.org);
    * Graphviz 2.26 (http://www.graphviz.org);
    * 7-Zip 4.65 (http://7-zip.org);
    * NASM 2.09.08 (http://www.nasm.us, минимальная установка);
    * Gnuwin32 (http://getgnuwin32.sourceforge.net/);
    * Perl (ActivePerl 5.12.3, http://www.activestate.com/activeperl/);
    * Python (version 2.7.2, 32-bit,
      http://python.org, http://python.org/ftp/python/2.7.2/python-2.7.2.msi)
    * Robot Framework (только если требуется функциональное тестирование):
        * Robot Framework (version 2.6.3, 32-bit,
          http://code.google.com/p/robotframework,
          http://robotframework.googlecode.com/files/robotframework-2.6.3.win32.exe);
        * M2Crypto (version 0.21.1, 32-bit,
          http://chandlerproject.org/Projects/MeTooCrypto,
          http://chandlerproject.org/pub/Projects/MeTooCrypto/M2Crypto-0.21.1.win32-py2.7.msi),
          после установки скопировать в корень директории Python файлы
          ssleay32.dll и libeay32.dll, которые будут готовы после сборки
          TunnelEx;
        * RIDE:
            * wxPython (version 2.8.12.1, unicode, 32-bit,
              http://wxpython.org,
              http://downloads.sourceforge.net/wxpython/wxPython2.8-win32-unicode-2.8.12.1-py27.exe);
            * RIDE (version 0.41, 32-bit,
              https://github.com/robotframework/RIDE/wiki,
              https://github.com/downloads/robotframework/RIDE/robotframework-ride-0.41.win32.exe);



1.2. Требование к настройке
---------------------------
Для того, чтобы сборочная система могла воспользоваться предоставленными
инструментами в переменной окружения PATH  (либо в общей, либо в среде IDE),
должны быть указаны следующие пути:
    * к исполнительным файлам RAR;
    * к исполнительным файлам doxygen;
    * к исполнительным файлам WiX;
    * к исполнительным файлам 7-Zip;
    * к исполнительным файлам Gnuwin32;
    * к исполнительным файлам NASM;

1.3. Требования к сторонним библиотекам и компонентам
-----------------------------------------------------
Для того, чтобы сборочная система смогла найти архивы со сторонними
библиотеками, все файлы должны быть помещены вручную, перед сборкой, в
каталог "externals", в том виде, в котором они были получены с сайта
производителя (если в перечне ниже не оговорено другое). Для сборки
проекта требуются следующие сторонние библиотеки:

    * ACE 6.0.0 (http://download.dre.vanderbilt.edu/) - архив 
      "sources only"-дистрибутива должен быть запакован с помощью TAR+BZ2
      и иметь имя ACE-src-6.0.0.tar.bz2;

    * Boost 1.46.1 (http://boost.org, http://www.boostpro.com/download), все
      компоненты (static-библиотеки, для многопоточной runtime-библиотеки)
      - путь к каталогу, в котором установлена библиотека должен быть указан
      в переменной окружения BOOST_PATH (например если она установлена в
      C:\Program Files\boost\boost_1_47, то BOOST_PATH должна содержать
      C:\Program Files\boost);

    * Libxml2 2.7.2 (ftp://xmlsoft.org/libxml2/) - архив дистрибутива должен
      быть запакован с помощью TAR+ZIP и иметь имя libxml2-sources-2.7.2.tar.gz;

    * wxWidgets 2.8.10 (http://wxwidgets.org/downloads/) - архив дистрибутива
      должен быть запакован с помощью TAR+BZ2 и иметь имя
      wxWidgets-2.8.10.tar.bz2;

    * OpenSSL 1.0.0d (http://openssl.org/source/) - архив дистрибутива должен
      быть запакован с помощью TAR+ZIP и иметь имя openssl-1.0.0d.tar.gz;

    * MiniUPnP client (http://miniupnp.free.fr/files/) - дистрибутив должен
      состоять из двух частей: TAR+ZIP архива miniupnpc-1.4.20100418.tar.gz с
      исходными кодами и ZIP архива upnpc-exe-win32-20100418.zip с бинарными
      файлам;

    * Google Test 1.6.0 (http://code.google.com/p/googletest/),
      static-библиотеки, для многопоточной runtime-библиотеки - путь к
      каталогу, в котором установлена фреймворк должен быть указан в
      переменной окружения GTEST_PATH (например если она установлена в
      C:\Program Files\GTest\gtest-1.6.0, то GTEST_PATH должна содержать
      C:\Program Files\GTest);



2. Получение исходных файлов
============================

git clone git@palchukovsky.com:TunnelEx



3. Сборка
=========

3.1. Подготовка сторонних библиотек
-----------------------------------
Перед сборкой необходимо поместить в каталог "externals" архивы необходимых
сторонних библиотек.

3.2. Автоматическая сборка дистрибутива
---------------------------------------
В командной среде IDE запустить командный файл "build.cmd" c единственным
ключом "full" для сборки всех компонент во всех конфигурациях.

3.3. Автоматическая сборка дистрибутива для публикации
------------------------------------------------------
В командной среде IDE запустить командный файл "build.cmd" c единственным
ключом "final" или "release". Будет произведена сборка дистрибутива для
публикации и проведено автоматическое unit-тестирования конфигураций Test
и Release.

3.4. Ручная сборка сторонних библиотек
--------------------------------------
Для того, чтобы собрать debug и release-версии сторонних библиотек, нужно в
командной среде IDE запустить командный файл "build.cmd" c параметрами:
    * "build=ws" для сборки всех библиотек (также можно выбрать одну библиотеку,
      например "build=boost");

3.5. Ручная сборка дистрибутива
-------------------------------
Перед сборкой дистрибутива необходимо выполнить сборку сторонних библиотек.
Сборка дистрибутива выполняется сборкой проекта "Setup". Все остальные
необходимые для этого модули собираются по дереву зависимостей.

3.6. Результат сборки
---------------------
Все файлы, полученные в процессе сборки, помещаются в директорию "output".
Эта директория делится на следующие поддиректории, каждая из которых имеет
своё назначение:
    * api - API продукта;
    * bin - бинарные файлы: исполняемые модули, DLL, PDB-файлы, графические
      файлы и т.д. (по сути, эта директория соответствует директории продукта
      после установки дистрибутива);
    * bin/modules - бинарные файлы модулей продукта;
    * bin/tools - бинарные файлы инструментов сторонних библиотек;
    * int - временные и промежуточные файлы, используемые в процессе сборки;
      разделена поддиректориями с именем конфигурации сборки, которые, в свою
      очередь, разбиты на поддиректории с именами модулей, проектов и сторонних
      библиотек;
    * lib - статические библиотеки и библиотеки импорта для DLL;
    * setup - дистрибутивы продукта, полученные в процессе сборки;



4. Тесты
========

4.1. Сборка тестов
------------------
Перед сборкой дистрибутива необходимо выполнить сборку сторонних библиотек.
Сборка дистрибутива выполняется сборкой проекта "Test". Все остальные
необходимые для этого модули собираются по дереву зависимостей.

